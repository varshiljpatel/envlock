name: CI
env:
  DEBUG: napi:*
  APP_NAME: envlock
  MACOSX_DEPLOYMENT_TARGET: "10.13"
permissions:
  contents: write
  id-token: write
"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - apps/docs/**
  pull_request: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: yarn workspace envlock build --target x86_64-apple-darwin
          # - host: windows-latest
          #   build: yarn workspace envlock build --target x86_64-pc-windows-msvc
          #   target: x86_64-pc-windows-msvc
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
          #   build: yarn workspace envlock build --target x86_64-unknown-linux-gnu
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          #   build: yarn workspace envlock build --target x86_64-unknown-linux-musl
          - host: macos-latest
            target: aarch64-apple-darwin
            build: yarn workspace envlock build --target aarch64-apple-darwin
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
          #   build: yarn workspace envlock build --target aarch64-unknown-linux-gnu
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine # Assuming this docker image supports aarch64-unknown-linux-musl or cross-compilation setup
          #   build: |-
          #     set -e &&
          #     rustup target add aarch64-unknown-linux-musl &&
          #     yarn workspace envlock build --target aarch64-unknown-linux-musl
          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   build: yarn workspace envlock build --target aarch64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    outputs:
      # Expose all targets as a comma-separated string
      all_targets: ${{ join(matrix.settings.*.target, ',') }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: yarn
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache 
            target/ # Cache the whole target directory for incremental builds
          # Key should be more specific if target influences cargo build significantly,
          # or if different OSs have incompatible target artifacts.
          # For NAPI-RS, the target directory is usually specific to the Rust target.
          key: ${{ runner.os }}-cargo-${{ matrix.settings.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.settings.target }}-
            ${{ runner.os }}-cargo-
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.13.0 # Ensure this Zig version is compatible with your needs
      - name: Setup toolchain (if any custom setup needed)
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      # This step might be redundant if the main node setup handles x86 correctly or if not needed for most builds.
      # It's specifically for i686-pc-windows-msvc.
      - name: Configure yarn for x86 architecture (for i686-pc-windows-msvc)
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Build
        run: yarn workspaces foreach --all run build:ts
      # This setup-node is specifically for i686 on Windows.
      # Consider if the initial setup-node can handle this with an architecture parameter if matrix allows.
      - name: Setup node x86 (for i686-pc-windows-msvc)
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          cache: yarn
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: >- # Using >- for multi-line options
            --user 0:0
            -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db
            -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache
            -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index
            -v ${{ github.workspace }}:/build -w /build
          run: ${{ matrix.settings.build }}
      - name: Build (non-docker)
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash # Default shell is bash, but explicit is fine
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          # Corrected path: Assumes your APP_NAME workspace is in 'packages/APP_NAME'
          # and the .node file is in the root of that workspace directory, named APP_NAME.platform.node
          path: packages/${{ env.APP_NAME }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error # Important: Fails the workflow if no files are found

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
      # - test-macOS-windows-binding
      # - test-linux-x64-gnu-binding
      # - test-linux-x64-musl-binding
      # - test-linux-aarch64-gnu-binding
      # - test-linux-aarch64-musl-binding
    permissions: # Explicitly grant permissions for this job
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: List files and folders (excluding node_modules and target)
        run: find . -type d \( -name "node_modules" -o -name "target" \) -prune -o -print
        shell: bash
      - name: Download all artifacts
        run: |
          IFS=',' read -ra ADDR <<< "${{ needs.build.outputs.all_targets }}"
          for target in "${ADDR[@]}"; do
            echo "Downloading bindings-${target}"
            gh run download ${{ github.run_id }} -n "bindings-${target}" -D .
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required for gh CLI
        # uses: actions/download-artifact@v4
        # with:
        #   name: bindings-${{ mAtrix.settings.target }}
        #   path: .
      - name: Move artifacts
        run: yarn workspace envlock artifacts
      - name: List packages
        run: ls -R ./crates/core/npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish -w ${{ env.APP_NAME }} --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish -w ${{ env.APP_NAME }} --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}=
# name: CI
# env:
#   DEBUG: napi:*
#   APP_NAME: envlock
#   MACOSX_DEPLOYMENT_TARGET: '10.13'
# permissions:
#   contents: write
#   id-token: write
# 'on':
#   push:
#     branches:
#       - main
#     tags-ignore:
#       - '**'
#     paths-ignore:
#       - '**/*.md'
#       - LICENSE
#       - '**/*.gitignore'
#       - .editorconfig
#       - docs/**
#   pull_request: null
# jobs:
#   build:
#     strategy:
#       fail-fast: false
#       matrix:
#         settings:
#           - host: macos-latest
#             target: x86_64-apple-darwin
#             build: yarn workspace envlock build --target x86_64-apple-darwin
#           - host: windows-latest
#             build: yarn workspace envlock build --target x86_64-pc-windows-msvc
#             target: x86_64-pc-windows-msvc
#           - host: ubuntu-latest
#             target: x86_64-unknown-linux-gnu
#             docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
#             build: yarn workspace envlock build --target x86_64-unknown-linux-gnu
#           - host: ubuntu-latest
#             target: x86_64-unknown-linux-musl
#             docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
#             build: yarn workspace envlock build --target x86_64-unknown-linux-musl
#           - host: macos-latest
#             target: aarch64-apple-darwin
#             build: yarn workspace envlock build --target aarch64-apple-darwin
#           - host: ubuntu-latest
#             target: aarch64-unknown-linux-gnu
#             docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
#             build: yarn workspace envlock build --target aarch64-unknown-linux-gnu
#           - host: ubuntu-latest
#             target: aarch64-unknown-linux-musl
#             docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
#             build: |-
#               set -e &&
#               rustup target add aarch64-unknown-linux-musl &&
#               yarn workspace envlock build --target aarch64-unknown-linux-musl
#           - host: windows-latest
#             target: aarch64-pc-windows-msvc
#             build: yarn workspace envlock build --target aarch64-pc-windows-msvc
#     name: stable - ${{ matrix.settings.target }} - node@20
#     runs-on: ${{ matrix.settings.host }}
#     steps:
#       - uses: actions/checkout@v4
#       - name: Setup node
#         uses: actions/setup-node@v4
#         if: ${{ !matrix.settings.docker }}
#         with:
#           node-version: 20
#           cache: yarn
#       - name: Install
#         uses: dtolnay/rust-toolchain@stable
#         if: ${{ !matrix.settings.docker }}
#         with:
#           toolchain: stable
#           targets: ${{ matrix.settings.target }}
#       - name: Cache cargo
#         uses: actions/cache@v4
#         with:
#           path: |
#             ~/.cargo/registry/index/
#             ~/.cargo/registry/cache/
#             ~/.cargo/git/db/
#             .cargo-cache
#             target/
#           key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
#       - uses: goto-bus-stop/setup-zig@v2
#         if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
#         with:
#           version: 0.13.0
#       - name: Setup toolchain
#         run: ${{ matrix.settings.setup }}
#         if: ${{ matrix.settings.setup }}
#         shell: bash
#       - name: Setup node x86
#         if: matrix.settings.target == 'i686-pc-windows-msvc'
#         run: yarn config set supportedArchitectures.cpu "ia32"
#         shell: bash
#       - name: Install dependencies
#         run: yarn install
#       - name: Setup node x86
#         uses: actions/setup-node@v4
#         if: matrix.settings.target == 'i686-pc-windows-msvc'
#         with:
#           node-version: 20
#           cache: yarn
#           architecture: x86
#       - name: Build in docker
#         uses: addnab/docker-run-action@v3
#         if: ${{ matrix.settings.docker }}
#         with:
#           image: ${{ matrix.settings.docker }}
#           options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
#           run: ${{ matrix.settings.build }}
#       - name: Build
#         run: ${{ matrix.settings.build }}
#         if: ${{ !matrix.settings.docker }}
#         shell: bash
#       - name: Upload artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: bindings-${{ matrix.settings.target }}
#           path: ${{ env.APP_NAME }}.*.node
#           if-no-files-found: error

# --- Tests ---
#   # test-macOS-windows-binding:
#   #   name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
#   #   needs:
#   #     - build
#   #   strategy:
#   #     fail-fast: false
#   #     matrix:
#   #       settings:
#   #         - host: macos-latest
#   #           target: x86_64-apple-darwin
#   #         - host: windows-latest
#   #           target: x86_64-pc-windows-msvc
#   #       node:
#   #         - '18'
#   #         - '20'
#   #   runs-on: ${{ matrix.settings.host }}
#   #   steps:
#   #     - uses: actions/checkout@v4
#   #     - name: Setup node
#   #       uses: actions/setup-node@v4
#   #       with:
#   #         node-version: ${{ matrix.node }}
#   #         cache: yarn
#   #         architecture: x64
#   #     - name: Install dependencies
#   #       run: yarn install
#   #     - name: Download artifacts
#   #       uses: actions/download-artifact@v4
#   #       with:
#   #         name: bindings-${{ matrix.settings.target }}
#   #         path: .
#   #     - name: List packages
#   #       run: ls -R .
#   #       shell: bash
#   #     - name: Test bindings
#   #       run: yarn workspaces run test
#   # test-linux-x64-gnu-binding:
#   #   name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
#   #   needs:
#   #     - build
#   #   strategy:
#   #     fail-fast: false
#   #     matrix:
#   #       node:
#   #         - '18'
#   #         - '20'
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - uses: actions/checkout@v4
#   #     - name: Setup node
#   #       uses: actions/setup-node@v4
#   #       with:
#   #         node-version: ${{ matrix.node }}
#   #         cache: yarn
#   #     - name: Install dependencies
#   #       run: yarn install
#   #     - name: Download artifacts
#   #       uses: actions/download-artifact@v4
#   #       with:
#   #         name: bindings-x86_64-unknown-linux-gnu
#   #         path: .
#   #     - name: List packages
#   #       run: ls -R .
#   #       shell: bash
#   #     - name: Test bindings
#   #       run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test
#   # test-linux-x64-musl-binding:
#   #   name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
#   #   needs:
#   #     - build
#   #   strategy:
#   #     fail-fast: false
#   #     matrix:
#   #       node:
#   #         - '18'
#   #         - '20'
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - uses: actions/checkout@v4
#   #     - name: Setup node
#   #       uses: actions/setup-node@v4
#   #       with:
#   #         node-version: ${{ matrix.node }}
#   #         cache: yarn
#   #     - name: Install dependencies
#   #       run: |
#   #         yarn config set supportedArchitectures.libc "musl"
#   #         yarn install
#   #     - name: Download artifacts
#   #       uses: actions/download-artifact@v4
#   #       with:
#   #         name: bindings-x86_64-unknown-linux-musl
#   #         path: .
#   #     - name: List packages
#   #       run: ls -R .
#   #       shell: bash
#   #     - name: Test bindings
#   #       run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}- yarn test
#   # test-linux-aarch64-gnu-binding:
#   #   name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
#   #   needs:
#   #     - build
#   #   strategy:
#   #     fail-fast: false
#   #     matrix:
#   #       node:
#   #         - '18'
#   #         - '20'
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - uses: actions/checkout@v4
#   #     - name: Download artifacts
#   #       uses: actions/download-artifact@v4
#   #       with:
#   #         name: bindings-aarch64-unknown-linux-gnu
#   #         path: .
#   #     - name: List packages
#   #       run: ls -R .
#   #       shell: bash
#   #     - name: Install dependencies
#   #       run: |
#   #         yarn config set supportedArchitectures.cpu "arm64"
#   #         yarn config set supportedArchitectures.libc "glibc"
#   #         yarn install
#   #     - name: Set up QEMU
#   #       uses: docker/setup-qemu-action@v3
#   #       with:
#   #         platforms: arm64
#   #     - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
#   #     - name: Setup and run tests
#   #       uses: addnab/docker-run-action@v3
#   #       with:
#   #         image: node:${{ matrix.node }}-slim
#   #         options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
#   #         run: |
#   #           set -e
#   #           yarn test
#   #           ls -la
#   # test-linux-aarch64-musl-binding:
#   #   name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
#   #   needs:
#   #     - build
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - uses: actions/checkout@v4
#   #     - name: Download artifacts
#   #       uses: actions/download-artifact@v4
#   #       with:
#   #         name: bindings-aarch64-unknown-linux-musl
#   #         path: .
#   #     - name: List packages
#   #       run: ls -R .
#   #       shell: bash
#   #     - name: Install dependencies
#   #       run: |
#   #         yarn config set supportedArchitectures.cpu "arm64"
#   #         yarn config set supportedArchitectures.libc "musl"
#   #         yarn install
#   #     - name: Set up QEMU
#   #       uses: docker/setup-qemu-action@v3
#   #       with:
#   #         platforms: arm64
#   #     - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
#   #     - name: Setup and run tests
#   #       uses: addnab/docker-run-action@v3
#   #       with:
#   #         image: node:lts-alpine
#   #         options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
#   #         run: |
#   #           set -e
#   #           yarn workspaces run test

# --- Publish ---
# publish:
#   name: Publish
#   runs-on: ubuntu-latest
#   needs:
#     - test-macOS-windows-binding
#     - test-linux-x64-gnu-binding
#     - test-linux-x64-musl-binding
#     - test-linux-aarch64-gnu-binding
#     - test-linux-aarch64-musl-binding
#   steps:
#     - uses: actions/checkout@v4
#     - name: Setup node
#       uses: actions/setup-node@v4
#       with:
#         node-version: 20
#         cache: yarn
#     - name: Install dependencies
#       run: yarn install
#     - name: Download all artifacts
#       uses: actions/download-artifact@v4
#       with:
#         path: artifacts
#     - name: Move artifacts
#       run: yarn artifacts
#     - name: List packages
#       run: ls -R ./npm
#       shell: bash
#     - name: Publish
#       run: |
#         npm config set provenance true
#         if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
#         then
#           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
#           npm publish --access public
#         elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
#         then
#           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
#           npm publish --tag next --access public
#         else
#           echo "Not a release, skipping publish"
#         fi
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
